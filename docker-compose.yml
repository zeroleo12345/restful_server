version: '3.5'

services:
  api:
    container_name: api
    build:
       context: .
       dockerfile: ./Dockerfile
    depends_on:
      - mysql
      - redis
    ports:      # 外部端口:docker内部端口
      - "8000:8000"
    environment:
      DEBUG: "${DEBUG}"
      ENVIRONMENT: "${ENVIRONMENT}"
    env_file:
      - .env
    volumes:       # 挂载盘(多用于输出程序文件, 日志等)
      - .:/app     # 主机路径:docker内部路径.(把主机下的src目录挂在到docker下, 实现边开发, 边调试)
      #- ./etc/supervisord.conf:/etc/supervisord.conf
      #- ./runtest:/bin/runtest
    #entrypoint: sh      # 用于调试
    #entrypoint: /usr/bin/supervisord -c /app/etc/supervisord.conf
    entrypoint: /app/bin/web.sh      # docker启动期执行程序
    #command: dockerize -wait tcp://mysql:3306 -timeout 10s
    tty: true
    restart: unless-stopped
    networks:
      - pppoe_system


  api_order:
    container_name: api_order
    build:
       context: .
       dockerfile: ./Dockerfile
    depends_on:
      - mysql
      - redis
    environment:
      DEBUG: "False"
      ENVIRONMENT: "production"
    env_file:
      - .env
    volumes:       # 挂载盘(多用于输出程序文件, 日志等)
      - .:/app     # 主机路径:docker内部路径.(把主机下的src目录挂在到docker下, 实现边开发, 边调试)
    entrypoint: /app/bin/manage_order.sh      # docker启动期执行程序
    tty: true
    restart: unless-stopped
    networks:
      - pppoe_system


  redis:
    container_name: restful_server_redis
    image: redis:alpine
    restart: unless-stopped
    networks:
      - pppoe_system


  mysql:
    container_name: restful_server_mysql
    image: mysql:5.7
    environment:
      MYSQL_ROOT_PASSWORD: 'root'
      MYSQL_DATABASE: 'trade'
    ports:
      - "33333:3306"    # 用于sequel pro连接
    #user: mysql
    #privileged: true   # 拥有主机的root权限
    volumes:       # 挂载盘(多用于输出程序文件, 日志等)
      - ./run/mysql:/run/mysql     # 主机路径:docker内部路径.
      - ./etc/mysql/my.cnf:/etc/mysql/my.cnf
    restart: unless-stopped
    command:
      - --character-set-server=utf8mb4
      - --collation-server=utf8mb4_unicode_ci
      - --skip-character-set-client-handshake
      - --default-time-zone=+08:00      # 同时在django连接时, 指定时区
    networks:
      - pppoe_system


networks:
  pppoe_system:
    name: pppoe_system_network_name
